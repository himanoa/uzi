-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Template Haskell utilities for the effectful library.
--   
--   Generate functions for performing operations of dynamically dispatched
--   effects via Template Haskell.
@package effectful-th
@version 1.0.0.1


-- | Generate functions for performing operations of dynamically dispatched
--   effects via Template Haskell.
module Effectful.TH

-- | For an effect data type <tt>E</tt>, <tt><a>makeEffect</a> E</tt>
--   generates the appropriate instance of <a>DispatchOf</a> as well as
--   functions for performing operations of <tt>E</tt> by <a>send</a>ing
--   them to the effect handler.
--   
--   <pre>
--   &gt;&gt;&gt; :{
--     data E :: Effect where
--       Op1 :: Int -&gt; m a -&gt; E m a
--       Op2 :: IOE :&gt; es =&gt; Int -&gt; E (Eff es) ()
--       Op3 :: (forall r. m r -&gt; m r) -&gt; E m Int
--     makeEffect ''E
--   :}
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; :kind! DispatchOf E
--   DispatchOf E :: Dispatch
--   = 'Dynamic
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; :i op1
--   op1 :: (HasCallStack, E :&gt; es) =&gt; Int -&gt; Eff es a -&gt; Eff es a
--   ...
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; :i op2
--   op2 :: (HasCallStack, E :&gt; es, IOE :&gt; es) =&gt; Int -&gt; Eff es ()
--   ...
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; :i op3
--   op3 ::
--     (HasCallStack, E :&gt; es) =&gt;
--     (forall r. Eff es r -&gt; Eff es r) -&gt; Eff es Int
--   ...
--   </pre>
--   
--   The naming rule changes the first uppercase letter in the constructor
--   name to lowercase or removes the <tt>:</tt> symbol in case of
--   operators. Any fixity annotations defined for the constructors are
--   preserved for the corresponding definitions.
makeEffect :: Name -> Q [Dec]

-- | Like <a>makeEffect</a>, but doesn't generate type signatures. This is
--   useful when you want to attach Haddock documentation to function
--   signatures:
--   
--   <pre>
--   &gt;&gt;&gt; :{
--     data Noop :: Effect where
--       Noop :: Noop m ()
--     makeEffect_ ''Noop
--     -- | Perform nothing at all.
--     noop :: Noop :&gt; es =&gt; Eff es ()
--   :}
--   </pre>
--   
--   <i>Note:</i> function signatures must be added <i>after</i> the call
--   to <a>makeEffect_</a>.
makeEffect_ :: Name -> Q [Dec]
