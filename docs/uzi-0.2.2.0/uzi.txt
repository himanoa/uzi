-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/uzi#readme</a>
@package uzi
@version 0.2.2.0

module Data.Discord.ChannelId
newtype ChannelId
ChannelId :: Text -> ChannelId
coerceChannelId :: ChannelId -> Text
makeChannelId :: Text -> ChannelId
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.ChannelId.ChannelId
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.ChannelId.ChannelId
instance GHC.Classes.Eq Data.Discord.ChannelId.ChannelId
instance GHC.Show.Show Data.Discord.ChannelId.ChannelId

module Data.Discord.ChannelName
newtype ChannelName
ChannelName :: Text -> ChannelName
coerceChannelName :: ChannelName -> Text
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.ChannelName.ChannelName
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.ChannelName.ChannelName
instance GHC.Classes.Eq Data.Discord.ChannelName.ChannelName
instance GHC.Show.Show Data.Discord.ChannelName.ChannelName

module Data.Discord.Channel
data ChannelType
GuildText :: ChannelType
GuildVoice :: ChannelType
GuildCategory :: ChannelType
newtype ChannelPosition
ChannelPosition :: Integer -> ChannelPosition
coerceChannelPosition :: ChannelPosition -> Integer
channelTypeFromInteger :: Int -> Maybe ChannelType
data Channel
Channel :: ChannelId -> ChannelType -> ChannelPosition -> ChannelName -> Maybe ChannelId -> Channel
[__id] :: Channel -> ChannelId
[__type] :: Channel -> ChannelType
[__position] :: Channel -> ChannelPosition
[__name] :: Channel -> ChannelName
[__parentId] :: Channel -> Maybe ChannelId
_type :: Lens' Channel ChannelType
_position :: Lens' Channel ChannelPosition
_parentId :: Lens' Channel (Maybe ChannelId)
_name :: Lens' Channel ChannelName
_id :: Lens' Channel ChannelId
makeChannel :: ChannelId -> ChannelType -> ChannelPosition -> ChannelName -> Maybe ChannelId -> Channel
instance GHC.Generics.Generic Data.Discord.Channel.ChannelType
instance GHC.Classes.Eq Data.Discord.Channel.ChannelType
instance GHC.Show.Show Data.Discord.Channel.ChannelType
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Channel.ChannelPosition
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Channel.ChannelPosition
instance GHC.Classes.Eq Data.Discord.Channel.ChannelPosition
instance GHC.Show.Show Data.Discord.Channel.ChannelPosition
instance GHC.Generics.Generic Data.Discord.Channel.Channel
instance GHC.Classes.Eq Data.Discord.Channel.Channel
instance GHC.Show.Show Data.Discord.Channel.Channel
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Channel.Channel
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Channel.Channel
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Channel.ChannelType
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Channel.ChannelType

module Data.Discord.Content
data Content
makeContent :: Text -> Validation MakeContentError Content
makeUnsafeContent :: Text -> Content
body :: Content -> Maybe Text
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Content.Content
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Content.Content
instance GHC.Classes.Eq Data.Discord.Content.Content
instance GHC.Show.Show Data.Discord.Content.Content
instance GHC.Classes.Eq Data.Discord.Content.MakeContentError
instance GHC.Show.Show Data.Discord.Content.MakeContentError

module Data.Discord.EventName
data EventName
ReadyEventName :: EventName
MessageCreateEventName :: EventName
GuildCreateEventName :: EventName
InteractionCreateEventName :: EventName
instance GHC.Classes.Eq Data.Discord.EventName.EventName
instance GHC.Show.Show Data.Discord.EventName.EventName
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.EventName.EventName

module Data.Discord.GlobalName
newtype GlobalName
GlobalName :: Text -> GlobalName
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.GlobalName.GlobalName
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.GlobalName.GlobalName
instance GHC.Classes.Eq Data.Discord.GlobalName.GlobalName
instance GHC.Show.Show Data.Discord.GlobalName.GlobalName

module Data.Discord.GuildId
newtype GuildId
GuildId :: Text -> GuildId
instance GHC.Show.Show Data.Discord.GuildId.GuildId
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.GuildId.GuildId
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.GuildId.GuildId
instance GHC.Classes.Eq Data.Discord.GuildId.GuildId

module Data.Discord.Internal
data PayloadStructure d
PayloadStructure :: Int -> d -> String -> PayloadStructure d
[$sel:op:PayloadStructure] :: PayloadStructure d -> Int
[$sel:d:PayloadStructure] :: PayloadStructure d -> d
[$sel:t:PayloadStructure] :: PayloadStructure d -> String
data SendEventPayloadStructure d
SendEventPayloadStructure :: Int -> d -> String -> SendEventPayloadStructure d
[$sel:op:SendEventPayloadStructure] :: SendEventPayloadStructure d -> Int
[$sel:d:SendEventPayloadStructure] :: SendEventPayloadStructure d -> d
[$sel:t:SendEventPayloadStructure] :: SendEventPayloadStructure d -> String
data ReceiveEventPayloadStructure d
ReceiveEventPayloadStructure :: Int -> d -> String -> ReceiveEventPayloadStructure d
[$sel:op:ReceiveEventPayloadStructure] :: ReceiveEventPayloadStructure d -> Int
[$sel:d:ReceiveEventPayloadStructure] :: ReceiveEventPayloadStructure d -> d
[$sel:t:ReceiveEventPayloadStructure] :: ReceiveEventPayloadStructure d -> String
instance GHC.Generics.Generic (Data.Discord.Internal.ReceiveEventPayloadStructure d)
instance GHC.Generics.Generic (Data.Discord.Internal.SendEventPayloadStructure d)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Data.Discord.Internal.PayloadStructure a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Data.Discord.Internal.PayloadStructure a)
instance GHC.Show.Show a => GHC.Show.Show (Data.Discord.Internal.PayloadStructure a)
instance GHC.Generics.Generic (Data.Discord.Internal.PayloadStructure d)

module Data.Discord.MessageReferencesObject
data MessageReferencesObject
MessageReferencesObject :: Text -> ChannelId -> Text -> Bool -> MessageReferencesObject
[messageId] :: MessageReferencesObject -> Text
[channelId] :: MessageReferencesObject -> ChannelId
[guildId] :: MessageReferencesObject -> Text
[failIfNotExist] :: MessageReferencesObject -> Bool
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.MessageReferencesObject.MessageReferencesObject
instance GHC.Generics.Generic Data.Discord.MessageReferencesObject.MessageReferencesObject
instance GHC.Classes.Eq Data.Discord.MessageReferencesObject.MessageReferencesObject
instance GHC.Show.Show Data.Discord.MessageReferencesObject.MessageReferencesObject

module Data.Discord.Nickname
newtype Nickname
Nickname :: Text -> Nickname
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Nickname.Nickname
instance GHC.Classes.Eq Data.Discord.Nickname.Nickname
instance GHC.Show.Show Data.Discord.Nickname.Nickname

module Data.Discord.Member
newtype Role
Role :: Text -> Role
data Member
Member :: [Role] -> Maybe Nickname -> Member
[roles] :: Member -> [Role]
[nick] :: Member -> Maybe Nickname
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Member.Role
instance GHC.Classes.Eq Data.Discord.Member.Role
instance GHC.Show.Show Data.Discord.Member.Role
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Member.Member
instance GHC.Generics.Generic Data.Discord.Member.Member
instance GHC.Classes.Eq Data.Discord.Member.Member
instance GHC.Show.Show Data.Discord.Member.Member

module Data.Discord.ReceiveEvent
data ReceiveEvent
Hello :: ReceiveEvent
Ready :: ReceiveEvent
Resumed :: ReceiveEvent
Reconnected :: ReceiveEvent
InvalidSession :: ReceiveEvent
ApplicationCommandPermissionsUpdate :: ReceiveEvent
AutoModerationRuleCreate :: ReceiveEvent
AutoModerationRuleUpdate :: ReceiveEvent
AutoModerationRuleDelete :: ReceiveEvent
AutoModerationActionExecution :: ReceiveEvent
ChannelCreate :: ReceiveEvent
ChannelUpdate :: ReceiveEvent
ChannelDelete :: ReceiveEvent
ChannelPinsUpdate :: ReceiveEvent
ThreadCreate :: ReceiveEvent
ThreadUpdate :: ReceiveEvent
ThreadDelete :: ReceiveEvent
ThreadListSync :: ReceiveEvent
ThreadMemberUpdate :: ReceiveEvent
ThreadMembersUpdate :: ReceiveEvent
EntitlementCreate :: ReceiveEvent
EntitlementUpdate :: ReceiveEvent
EntitlementDelete :: ReceiveEvent
GuildCreate :: ReceiveEvent
GuildUpdate :: ReceiveEvent
GuildDelete :: ReceiveEvent
GuildAuditLogEntryCreate :: ReceiveEvent
GuildBanAdd :: ReceiveEvent
GuildBanRemove :: ReceiveEvent
GuildEmojisUpdate :: ReceiveEvent
GuildStickersUpdate :: ReceiveEvent
GuildIntegrationsUpdate :: ReceiveEvent
GuildMemberAdd :: ReceiveEvent
GuildMemberRemove :: ReceiveEvent
GuildMemberUpdate :: ReceiveEvent
GuildRoleCreate :: ReceiveEvent
GuildRoleUpdate :: ReceiveEvent
GuildRoleDelete :: ReceiveEvent
GuildScheduledEventCreate :: ReceiveEvent
GuildScheduledEventUpdate :: ReceiveEvent
GuildScheduledEventDelete :: ReceiveEvent
GuildScheduledEventUserAdd :: ReceiveEvent
GuildScheduledEventUserRemove :: ReceiveEvent
IntegrationCreate :: ReceiveEvent
IntegrationUpdate :: ReceiveEvent
IntegrationDelete :: ReceiveEvent
InteractionCreate :: ReceiveEvent
InviteCreate :: ReceiveEvent
InviteDelete :: ReceiveEvent
MessageCreate :: ReceiveEvent
MessageUpdate :: ReceiveEvent
MessageDelete :: ReceiveEvent
MessageDeleteBulk :: ReceiveEvent
MessageReactionAdd :: ReceiveEvent
MessageReactionRemove :: ReceiveEvent
MessageReactionRemoveAll :: ReceiveEvent
MessageReactionRemoveEmoji :: ReceiveEvent
PresenceUpdate :: ReceiveEvent
StageInstanceCreate :: ReceiveEvent
StageInstanceUpdate :: ReceiveEvent
StageInstanceDelete :: ReceiveEvent
TypingStart :: ReceiveEvent
UserUpdate :: ReceiveEvent
VoiceStateUpdate :: ReceiveEvent
VoiceServerUpdate :: ReceiveEvent
WebhooksUpdate :: ReceiveEvent
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.ReceiveEvent.ReceiveEvent
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.ReceiveEvent.ReceiveEvent
instance GHC.Generics.Generic Data.Discord.ReceiveEvent.ReceiveEvent
instance GHC.Enum.Enum Data.Discord.ReceiveEvent.ReceiveEvent
instance GHC.Show.Show Data.Discord.ReceiveEvent.ReceiveEvent

module Data.Discord.ReceiveEventOperationCode
data ReceiveEventOperationCode
Hello :: ReceiveEventOperationCode
Ready :: ReceiveEventOperationCode
HeartbeatAck :: ReceiveEventOperationCode
instance GHC.Show.Show Data.Discord.ReceiveEventOperationCode.ReceiveEventOperationCode
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.ReceiveEventOperationCode.ReceiveEventOperationCode

module Data.Discord.Request.IdentifyRequest
messageContentIntent :: Integer
guildMessageContentIntent :: Integer
guildManageChannelsIntent :: Integer
guildManageServerIntent :: Integer
data IdentifyRequestProperties
IdentifyRequestProperties :: String -> String -> String -> IdentifyRequestProperties
[os] :: IdentifyRequestProperties -> String
[browser] :: IdentifyRequestProperties -> String
[device] :: IdentifyRequestProperties -> String
data IdentifyRequest
IdentifyRequest :: Text -> Integer -> IdentifyRequestProperties -> IdentifyRequest
[token] :: IdentifyRequest -> Text
[intents] :: IdentifyRequest -> Integer
[properties] :: IdentifyRequest -> IdentifyRequestProperties
defaultIdentifyRequestProperties :: IdentifyRequestProperties
defaultIntents :: Integer
defaultIdentifyRequest :: Text -> IdentifyRequest
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Request.IdentifyRequest.IdentifyRequestProperties
instance GHC.Classes.Eq Data.Discord.Request.IdentifyRequest.IdentifyRequestProperties
instance GHC.Generics.Generic Data.Discord.Request.IdentifyRequest.IdentifyRequestProperties
instance GHC.Show.Show Data.Discord.Request.IdentifyRequest.IdentifyRequestProperties
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Request.IdentifyRequest.IdentifyRequest
instance GHC.Classes.Eq Data.Discord.Request.IdentifyRequest.IdentifyRequest
instance GHC.Generics.Generic Data.Discord.Request.IdentifyRequest.IdentifyRequest
instance GHC.Show.Show Data.Discord.Request.IdentifyRequest.IdentifyRequest

module Data.Discord.Request.Internal
data Request
[Identify] :: IdentifyRequest -> Request
[Heartbeat] :: Request
instance GHC.Classes.Eq Data.Discord.Request.Internal.Request
instance GHC.Show.Show Data.Discord.Request.Internal.Request
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Request.Internal.Request

module Data.Discord.Request
data Request
[Identify] :: IdentifyRequest -> Request
[Heartbeat] :: Request
data IdentifyRequest
defaultIdentifyRequest :: Text -> IdentifyRequest
defaultIdentifyRequestProperties :: IdentifyRequestProperties

module Data.Discord.Request.SlashCommand
newtype Name
Name :: Text -> Name
newtype Description
Description :: Text -> Description
data CommandOption
StringOption :: !Name -> !Description -> !Bool -> CommandOption
ChannelOption :: !Name -> !Description -> !Bool -> CommandOption
instance GHC.Show.Show Data.Discord.Request.SlashCommand.Name
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Request.SlashCommand.Name
instance GHC.Classes.Eq Data.Discord.Request.SlashCommand.Name
instance GHC.Show.Show Data.Discord.Request.SlashCommand.Description
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Request.SlashCommand.Description
instance GHC.Classes.Eq Data.Discord.Request.SlashCommand.Description
instance GHC.Show.Show Data.Discord.Request.SlashCommand.CommandOption
instance GHC.Classes.Eq Data.Discord.Request.SlashCommand.CommandOption
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.Request.SlashCommand.CommandOption

module Data.Discord.Response.HelloEventResponse
newtype HelloEventResponse
HelloEventResponse :: Int -> HelloEventResponse
[_interval] :: HelloEventResponse -> Int
interval :: Iso' HelloEventResponse Int
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Response.HelloEventResponse.HelloEventResponse
instance GHC.Classes.Eq Data.Discord.Response.HelloEventResponse.HelloEventResponse
instance GHC.Generics.Generic Data.Discord.Response.HelloEventResponse.HelloEventResponse
instance GHC.Show.Show Data.Discord.Response.HelloEventResponse.HelloEventResponse

module Data.Discord.Response.InteractionCreateEventResponse
data InteractionCreateEventResponse
InteractionCreateEventResponse :: ChannelId -> Member -> Text -> Map Text Text -> GuildId -> InteractionCreateEventResponse
[_channelId] :: InteractionCreateEventResponse -> ChannelId
[_member] :: InteractionCreateEventResponse -> Member
[_slashCommandName] :: InteractionCreateEventResponse -> Text
[_commandOptions] :: InteractionCreateEventResponse -> Map Text Text
[_guildId] :: InteractionCreateEventResponse -> GuildId
channelId :: Lens' InteractionCreateEventResponse ChannelId
member :: Lens' InteractionCreateEventResponse Member
guildId :: Lens' InteractionCreateEventResponse GuildId
slashCommandName :: Lens' InteractionCreateEventResponse Text
commandOptions :: Lens' InteractionCreateEventResponse (Map Text Text)
makeInteractionCreateEventResponse :: ChannelId -> Member -> Text -> Map Text Text -> GuildId -> InteractionCreateEventResponse
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Response.InteractionCreateEventResponse.InteractionCreateEventResponse
instance GHC.Show.Show Data.Discord.Response.InteractionCreateEventResponse.OptionPair
instance GHC.Classes.Eq Data.Discord.Response.InteractionCreateEventResponse.OptionPair
instance GHC.Classes.Eq Data.Discord.Response.InteractionCreateEventResponse.InteractionCreateEventResponse
instance GHC.Show.Show Data.Discord.Response.InteractionCreateEventResponse.InteractionCreateEventResponse
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Response.InteractionCreateEventResponse.OptionPair

module Data.Discord.SendOperation
data SendOperation
Identify :: SendOperation
Resume :: SendOperation
Heartbeat :: SendOperation
RequestGuildMembers :: SendOperation
UpdateVoiceState :: SendOperation
UpdatePresence :: SendOperation

-- | Get operationCode &gt;&gt;&gt; operationCode Identify 2 &gt;&gt;&gt;
--   operationCode Resume 6 &gt;&gt;&gt; operationCode Heartbeat 1
--   &gt;&gt;&gt; operationCode RequestGuildMembers 8 &gt;&gt;&gt;
--   operationCode UpdateVoiceState 4 &gt;&gt;&gt; operationCode
--   UpdatePresence 3
operationCode :: SendOperation -> Int
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.SendOperation.SendOperation
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.SendOperation.SendOperation
instance GHC.Generics.Generic Data.Discord.SendOperation.SendOperation
instance GHC.Show.Show Data.Discord.SendOperation.SendOperation

module Data.Discord.UserId
newtype UserId
UserId :: Text -> UserId
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.UserId.UserId
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.UserId.UserId
instance GHC.Classes.Eq Data.Discord.UserId.UserId
instance GHC.Show.Show Data.Discord.UserId.UserId

module Data.Discord.UserName
newtype UserName
UserName :: Text -> UserName
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.UserName.UserName
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.UserName.UserName
instance GHC.Classes.Eq Data.Discord.UserName.UserName
instance GHC.Show.Show Data.Discord.UserName.UserName

module Data.Discord.User
data User
User :: UserId -> UserName -> Maybe GlobalName -> User
[_id] :: User -> UserId
[_username] :: User -> UserName
[_globalname] :: User -> Maybe GlobalName
username :: Lens' User UserName
id :: Lens' User UserId
globalname :: Lens' User (Maybe GlobalName)
instance GHC.Generics.Generic Data.Discord.User.User
instance GHC.Classes.Eq Data.Discord.User.User
instance GHC.Show.Show Data.Discord.User.User
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.User.User
instance Data.Aeson.Types.ToJSON.ToJSON Data.Discord.User.User
instance Data.Default.Class.Default Data.Discord.User.User

module Data.Discord.Response.ReadyEventResponse
newtype ReadyEventResponse
ReadyEventResponse :: User -> ReadyEventResponse
[_user] :: ReadyEventResponse -> User
user :: Iso' ReadyEventResponse User
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Response.ReadyEventResponse.ReadyEventResponse
instance GHC.Classes.Eq Data.Discord.Response.ReadyEventResponse.ReadyEventResponse
instance GHC.Generics.Generic Data.Discord.Response.ReadyEventResponse.ReadyEventResponse
instance GHC.Show.Show Data.Discord.Response.ReadyEventResponse.ReadyEventResponse

module Data.Discord.Mention
data Mention
Mention :: UserId -> UserName -> Maybe GlobalName -> Bool -> Mention
[_id] :: Mention -> UserId
[_username] :: Mention -> UserName
[_globalname] :: Mention -> Maybe GlobalName
[_bot] :: Mention -> Bool
username :: Lens' Mention UserName
id :: Lens' Mention UserId
globalname :: Lens' Mention (Maybe GlobalName)
bot :: Lens' Mention Bool
makeMention :: UserId -> UserName -> Maybe GlobalName -> Bool -> Mention
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Mention.Mention
instance GHC.Classes.Eq Data.Discord.Mention.Mention
instance GHC.Show.Show Data.Discord.Mention.Mention

module Data.Discord.Response.MessageCreateEventResponse
data MessageCreateEventResponse
MessageCreateEventResponse :: ChannelId -> Content -> [Mention] -> Member -> Bool -> GuildId -> MessageCreateEventResponse
[_channelId] :: MessageCreateEventResponse -> ChannelId
[_content] :: MessageCreateEventResponse -> Content
[_mentions] :: MessageCreateEventResponse -> [Mention]
[_member] :: MessageCreateEventResponse -> Member
[_isBot] :: MessageCreateEventResponse -> Bool
[_guildId] :: MessageCreateEventResponse -> GuildId
channelId :: Lens' MessageCreateEventResponse ChannelId
content :: Lens' MessageCreateEventResponse Content
mentions :: Lens' MessageCreateEventResponse [Mention]
member :: Lens' MessageCreateEventResponse Member
isBot :: Lens' MessageCreateEventResponse Bool
guildId :: Lens' MessageCreateEventResponse GuildId
makeMessageCreateEventResponse :: ChannelId -> Content -> [Mention] -> Member -> Bool -> GuildId -> MessageCreateEventResponse
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Response.MessageCreateEventResponse.MessageCreateEventResponse
instance GHC.Classes.Eq Data.Discord.Response.MessageCreateEventResponse.MessageCreateEventResponse
instance GHC.Show.Show Data.Discord.Response.MessageCreateEventResponse.MessageCreateEventResponse

module Data.Discord.Response.Internal
data Response
Hello :: HelloEventResponse -> Response
Ready :: ReadyEventResponse -> Response
MessageCreate :: MessageCreateEventResponse -> Response
InteractionCreate :: InteractionCreateEventResponse -> Response
HeartbeatAck :: Response
instance GHC.Classes.Eq Data.Discord.Response.Internal.Response
instance GHC.Show.Show Data.Discord.Response.Internal.Response
instance Data.Aeson.Types.FromJSON.FromJSON Data.Discord.Response.Internal.Response

module Data.Discord.Response

module Data.Discord
makeContent :: Text -> Validation MakeContentError Content
data Content


-- | Discordのハートビートリクエストを送る間隔を保存するためのデータ構造を定義したモジュールです。 ハートビートの間隔は
--   DiscordGatewayAPIのHelloEventによって受信し、'State HeartbeatInterval' に保存します。
--   
--   State HeartbeatInterval を読みこんで間隔通りにHeartbeatリクエストを送るのは
--   <a>sendHeartbeat</a> です
--   
--   DiscordAPI側のドキュメント:
--   <a>https://discord.com/developers/docs/topics/voice-connections#heartbeating</a>
--   |
module Data.Uzi.HeartbeatInterval

-- | Discordのハートビートリクエストを送る間隔を保存するためのデータ構造です
newtype HeartbeatInterval
HeartbeatInterval :: Int -> HeartbeatInterval
coerceHeartbeatInterval :: HeartbeatInterval -> Int
makeHeartbeatInterval :: Int -> HeartbeatInterval
instance GHC.Classes.Eq Data.Uzi.HeartbeatInterval.HeartbeatInterval
instance GHC.Show.Show Data.Uzi.HeartbeatInterval.HeartbeatInterval


-- | 宇治共和国のDiscordに存在するtimesテキストチャンネルの定義
module Data.Uzi.TimesChannel

-- | Timesチャンネルに使われている名前のデータ構造です。
--   
--   基本的な形は #times-{name} のnameの部分を表わしています。
--   
--   だがもし、君が例外だというのなら… ならば生き延びるがいい、君にはその権利と義務がある
--   
--   詳細は <a>makeTimesChannel</a> を参照してください。
newtype TimesName
TimesName :: Text -> TimesName
coerceTimesName :: TimesName -> Text

-- | Timesチャンネルを表すデータ構造です。
data TimesChannel
TimesChannel :: ChannelId -> TimesName -> TimesChannel

-- | TimesChannelのDiscord上でのチャンネルID
[_id] :: TimesChannel -> ChannelId

-- | チャンネルの名前
[_name] :: TimesChannel -> TimesName
name :: Lens' TimesChannel TimesName
id :: Lens' TimesChannel ChannelId

-- | DiscordのChannelからTimesChannel型に変換するためのスマートコンストラクタです
--   
--   変換に失敗する可能性があります。 失敗要因は後述する TimesChannelの命名規則を満たさないチャンネルが引数に渡された場合です。
--   
--   <h1>TimesChannelの命名規則</h1>
--   
--   TimesChannelは次の命名規則の中でいずれかを満たす必要があります
--   
--   <ul>
--   <li>BasicTimesName: #times-{name} の形式</li>
--   <li>ShortTimesName: #time${name} の形式</li>
--   <li>TheNyTimesName: #the-{name}-times の形式</li>
--   </ul>
makeTimesChannel :: Channel -> Maybe TimesChannel

-- | 複数の <a>Channel</a> に対して変換処理を行い、成功したもののみを返す関数
fromChannels :: Vector Channel -> Vector TimesChannel
instance GHC.Classes.Ord Data.Uzi.TimesChannel.TimesChannel
instance GHC.Classes.Ord Data.Uzi.TimesChannel.TimesName
instance Data.Aeson.Types.ToJSON.ToJSON Data.Uzi.TimesChannel.TimesName
instance Data.Aeson.Types.FromJSON.FromJSON Data.Uzi.TimesChannel.TimesName
instance GHC.Classes.Eq Data.Uzi.TimesChannel.TimesName
instance GHC.Show.Show Data.Uzi.TimesChannel.TimesName
instance GHC.Classes.Eq Data.Uzi.TimesChannel.TimesChannel
instance GHC.Show.Show Data.Uzi.TimesChannel.TimesChannel


-- | 宇治共和国のDiscordに存在するtimesチャンネルをグルーピングしたチャンネルの定義です。
--   
--   具体的には名前が TIMES(A-M) TIMES(N-Z) なグループチャンネルのことを指します
module Data.Uzi.TimesChannelGroup

-- | 宇治共和国に存在するTIMES(A-M) TIMES(N-Z) な名前のグループチャンネルのデータ定義
--   
--   <ul>
--   <li><a>AtoMGroup</a> は頭文字をA-MのTimesChannelをまとめたグループ</li>
--   <li><a>NtoZGroup</a> は頭文字をN-ZのTimesChannelをまとめたグループ</li>
--   </ul>
data TimesChannelGroup
AtoMGroup :: ChannelId -> TimesChannelGroup
NtoZGroup :: ChannelId -> TimesChannelGroup

-- | <a>findTimesCategories</a> を実行した時に発生しうるエラーをまとめたデータ構造です。
--   
--   発生しうるエラーとシチュエーションは次の通りです
--   
--   <ul>
--   <li><a>AtoMGroupMissing</a> 引数で渡されたチャンネル一覧の中に
--   AtoMになりうるグループチャンネルが存在しなかった場合</li>
--   <li><a>NtoZGroupMissing</a> 引数で渡されたチャンネル一覧の中に
--   NtoZになりうるグループチャンネルが存在しなかった場合</li>
--   <li><a>AllMissing</a> 引数で渡されたチャンネル一覧の中に、AtoM,NtoZどちらも存在しなかった場合</li>
--   </ul>
data FindTimesChannelGroupsError
AtoMGroupMissing :: FindTimesChannelGroupsError
NtoZGroupMissing :: FindTimesChannelGroupsError
AllMissing :: FindTimesChannelGroupsError

-- | チャンネル一覧からTIMES(A-M) TIMES(N-Z)のグループチャンネルを探し出して返す関数
--   
--   この関数は失敗する可能性があります。
--   
--   失敗した場合に発生するエラーについては <a>FindTimesChannelGroupsError</a>を参照してください。
findTimesCategories :: Vector Channel -> Either FindTimesChannelGroupsError (TimesChannelGroup, TimesChannelGroup)

-- | timesチャンネルの名前の頭文字を使ってAtoM,NtoZにグルーピングする関数
--   
--   グルーピングされたTimesChannelの順番がアルファベット順なことは保証されない
--   
--   ソートしたい場合は戻り値に対して <a>sortTimesChannelGroupMap</a> を呼び出してください
groupByFirstLetter :: Vector TimesChannel -> TimesChannelGroup -> TimesChannelGroup -> Map TimesChannelGroup [TimesChannel]

-- | <a>groupByFirstLetter</a> の戻り値で関連付けられたTimesChannelのリストをソートする
sortTimesChannelGroupMap :: Map TimesChannelGroup [TimesChannel] -> Map TimesChannelGroup [TimesChannel]
coerceChannelId :: TimesChannelGroup -> ChannelId
instance GHC.Classes.Eq Data.Uzi.TimesChannelGroup.TimesChannelGroup
instance GHC.Show.Show Data.Uzi.TimesChannelGroup.TimesChannelGroup
instance GHC.Classes.Eq Data.Uzi.TimesChannelGroup.FindTimesChannelGroupsError
instance GHC.Show.Show Data.Uzi.TimesChannelGroup.FindTimesChannelGroupsError
instance GHC.Classes.Ord Data.Uzi.TimesChannelGroup.TimesChannelGroup


-- | UziBotがログインしているDiscordアカウントの情報へアクセスするEffectです。
--   
--   Botがログインしているユーザーが確定するのはUziを起動してDiscordからReadyEventを受け取った後です。
module Effectful.BotUser.Effect
data BotUser :: Effect
[SetBotUser] :: User -> BotUser m ()
[GetBotUser] :: BotUser m (Maybe User)

-- | Botがログイン中のDiscordアカウントを更新します
--   
--   <a>readyEventHandler</a>以外からは呼び出さないでください
setBotUser :: (HasCallStack, BotUser :> es) => User -> Eff es ()

-- | Botがログイン中のDiscordアカウントの情報を取得します
--   
--   ログイン中のDiscordアカウントが確定しない場合は<a>Nothing</a>を返します
getBotUser :: (HasCallStack, BotUser :> es) => Eff es (Maybe User)


-- | UziBotがログインしているDiscordアカウントの情報へアクセスするEffectのインタプリタ
module Effectful.BotUser.Interpreter

-- | BotUserEffectを実行します
runBotUser :: State (Maybe User) :> es => Eff (BotUser : es) a -> Eff es a

module Effectful.BotUser

-- | BotUserEffectを実行します
runBotUser :: State (Maybe User) :> es => Eff (BotUser : es) a -> Eff es a

-- | Botがログイン中のDiscordアカウントを更新します
--   
--   <a>readyEventHandler</a>以外からは呼び出さないでください
setBotUser :: (HasCallStack, BotUser :> es) => User -> Eff es ()

-- | Botがログイン中のDiscordアカウントの情報を取得します
--   
--   ログイン中のDiscordアカウントが確定しない場合は<a>Nothing</a>を返します
getBotUser :: (HasCallStack, BotUser :> es) => Eff es (Maybe User)
data BotUser :: Effect


-- | UziBotが使うDiscordのアクセストークンを読み出すためのEffect Moduleです
module Effectful.DiscordApiTokenReader.Effect

-- | UziBotが使うDiscordのアクセストークンを読み出すためのEffectの定義
data DiscordApiTokenReader :: Effect
[GetToken] :: DiscordApiTokenReader m Text

-- | DiscordAPIにアクセスするためのToken文字列を取得します。
--   
--   このAPIはEventHandlerなどからは直接読み出さないでください。
--   
--   DiscordのAPIを使いたい場合は <a>DiscordChannel</a> や <a>DiscordGateway</a>
--   などのこれらをラップしたEffectを使用してください。
getToken :: DiscordApiTokenReader :> es => Eff es Text


-- | UziBotが使うDiscordのアクセストークンを取得するEffectのインタプリタです
module Effectful.DiscordApiTokenReader.Interpreter
data FromEnvironmentError
DiscordApiTokenIsUndefined :: FromEnvironmentError

-- | <a>DiscordApiTokenReader</a> Effectを実行します
--   
--   このインタプリタでは環境変数 UZI_DISCORD_API_TOKEN に入ったDiscordAPiTokenを取得します
runDiscordApiTokenReader :: Environment :> es => Eff (DiscordApiTokenReader : es) a -> Eff es a
instance GHC.Show.Show Effectful.DiscordApiTokenReader.Interpreter.FromEnvironmentError
instance GHC.Exception.Type.Exception Effectful.DiscordApiTokenReader.Interpreter.FromEnvironmentError

module Effectful.DiscordApiTokenReader

-- | DiscordAPIにアクセスするためのToken文字列を取得します。
--   
--   このAPIはEventHandlerなどからは直接読み出さないでください。
--   
--   DiscordのAPIを使いたい場合は <a>DiscordChannel</a> や <a>DiscordGateway</a>
--   などのこれらをラップしたEffectを使用してください。
getToken :: DiscordApiTokenReader :> es => Eff es Text

-- | <a>DiscordApiTokenReader</a> Effectを実行します
--   
--   このインタプリタでは環境変数 UZI_DISCORD_API_TOKEN に入ったDiscordAPiTokenを取得します
runDiscordApiTokenReader :: Environment :> es => Eff (DiscordApiTokenReader : es) a -> Eff es a

-- | UziBotが使うDiscordのアクセストークンを読み出すためのEffectの定義
data DiscordApiTokenReader :: Effect
[GetToken] :: DiscordApiTokenReader m Text


-- | UziBotのApplication Idを読み出すためのEffect Moduleです
module Effectful.DiscordApplication.Effect

-- | UziBotのApplication Idを読み出すためのEffectの定義
data DiscordApplication :: Effect
[GetApplication] :: DiscordApplication m ApplicationId

-- | UziBotのApplicationを取得します。
getApplication :: DiscordApplication :> es => Eff es ApplicationId
newtype ApplicationId
ApplicationId :: Text -> ApplicationId
instance Data.Aeson.Types.ToJSON.ToJSON Effectful.DiscordApplication.Effect.ApplicationId
instance Data.Aeson.Types.FromJSON.FromJSON Effectful.DiscordApplication.Effect.ApplicationId
instance GHC.Classes.Eq Effectful.DiscordApplication.Effect.ApplicationId
instance GHC.Show.Show Effectful.DiscordApplication.Effect.ApplicationId


-- | DiscordChannelに関するAPIを実行するためのEffectです。
--   
--   Discord本家のChannelAPIの仕様はこちらです
--   <a>https://discord.com/developers/docs/resources/channel#channels-resource</a>
module Effectful.DiscordChannel.Effect

-- | 投稿に対して使えるメンションのタイプの定義
data AllowedMentionTypes
Roles :: AllowedMentionTypes
Users :: AllowedMentionTypes
Everyone :: AllowedMentionTypes

-- | 投稿に対して許可されているメンションの定義
data AllowedMention
AllowedMention :: [AllowedMentionTypes] -> [Text] -> [Text] -> Bool -> Maybe MessageReferencesObject -> AllowedMention
[$sel:parse:AllowedMention] :: AllowedMention -> [AllowedMentionTypes]
[$sel:roles:AllowedMention] :: AllowedMention -> [Text]
[$sel:users:AllowedMention] :: AllowedMention -> [Text]
[$sel:repliedUser:AllowedMention] :: AllowedMention -> Bool
[$sel:messageReferences:AllowedMention] :: AllowedMention -> Maybe MessageReferencesObject

-- | チャンネルにメッセージを投稿するためのデータ構造
data SendMessageParams
SendMessageParams :: ChannelId -> Content -> Maybe Text -> Bool -> Maybe AllowedMention -> Maybe MessageReferencesObject -> Maybe Text -> SendMessageParams

-- | 投稿先のチャンネルID
[$sel:_channelId:SendMessageParams] :: SendMessageParams -> ChannelId

-- | 投稿内容
[$sel:_content:SendMessageParams] :: SendMessageParams -> Content
[$sel:_nonce:SendMessageParams] :: SendMessageParams -> Maybe Text

-- | 投稿内容がボイスチャンネルで音声読み上げされるか(<a>True</a>: 読み上げられる, <a>False</a>: 読み上げられない)
[$sel:_tts:SendMessageParams] :: SendMessageParams -> Bool
[$sel:_allowedMentions:SendMessageParams] :: SendMessageParams -> Maybe AllowedMention
[$sel:_messageReference:SendMessageParams] :: SendMessageParams -> Maybe MessageReferencesObject
[$sel:_stickerIds:SendMessageParams] :: SendMessageParams -> Maybe Text
tts :: Lens' SendMessageParams Bool
stickerIds :: Lens' SendMessageParams (Maybe Text)
nonce :: Lens' SendMessageParams (Maybe Text)
messageReference :: Lens' SendMessageParams (Maybe MessageReferencesObject)
content :: Lens' SendMessageParams Content
channelId :: Lens' SendMessageParams ChannelId
allowedMentions :: Lens' SendMessageParams (Maybe AllowedMention)

-- | <a>SendMessageParams</a> のスマートコンストラクタ
makeSendMessageParams :: ChannelId -> Content -> Maybe Text -> Bool -> Maybe AllowedMention -> Maybe MessageReferencesObject -> Maybe Text -> SendMessageParams

-- | <a>makeSendMessageParams</a> のラッパー
makeMessage :: ChannelId -> Content -> SendMessageParams

-- | チャンネルを作成するために必要なパラメータ
data CreateChannelParams
CreateChannelParams :: ChannelName -> Int -> CreateChannelParams

-- | 作成したいチャンネル名
[$sel:__name:CreateChannelParams] :: CreateChannelParams -> ChannelName

-- | チャンネルの種類。<a>詳細</a>
[$sel:__type:CreateChannelParams] :: CreateChannelParams -> Int
_type :: Lens' CreateChannelParams Int
_name :: Lens' CreateChannelParams ChannelName

-- | <a>CreateChannelParams</a> を生成するためのスマートコンストラクタ
makeCreateChannelParams :: ChannelName -> CreateChannelParams
data DiscordChannel :: Effect
[SendMessage] :: SendMessageParams -> DiscordChannel m ()
[CreateChannel] :: GuildId -> CreateChannelParams -> DiscordChannel m ()
[GetChannels] :: GuildId -> DiscordChannel m [Channel]
[ModifyChannel] :: Channel -> DiscordChannel m ()

-- | DiscordChannelにBotでテキストメッセージを送信します
sendMessage :: (HasCallStack, DiscordChannel :> es) => SendMessageParams -> Eff es ()

-- | 新たにDiscordChannelを作成します
createChannel :: (HasCallStack, DiscordChannel :> es) => GuildId -> CreateChannelParams -> Eff es ()

-- | 引数のギルドIDのサーバーに存在するチャンネルの一覧を取得します
getChannels :: (HasCallStack, DiscordChannel :> es) => GuildId -> Eff es [Channel]

-- | チャンネルの情報を更新します
modifyChannel :: (HasCallStack, DiscordChannel :> es) => Channel -> Eff es ()
instance Data.Aeson.Types.FromJSON.FromJSON Effectful.DiscordChannel.Effect.CreateChannelParams
instance Data.Aeson.Types.ToJSON.ToJSON Effectful.DiscordChannel.Effect.CreateChannelParams
instance GHC.Generics.Generic Effectful.DiscordChannel.Effect.CreateChannelParams
instance GHC.Classes.Eq Effectful.DiscordChannel.Effect.CreateChannelParams
instance GHC.Show.Show Effectful.DiscordChannel.Effect.CreateChannelParams
instance Data.Aeson.Types.ToJSON.ToJSON Effectful.DiscordChannel.Effect.SendMessageParams
instance Data.Aeson.Types.ToJSON.ToJSON Effectful.DiscordChannel.Effect.AllowedMentionTypes
instance GHC.Generics.Generic Effectful.DiscordChannel.Effect.AllowedMentionTypes
instance GHC.Classes.Eq Effectful.DiscordChannel.Effect.AllowedMentionTypes
instance GHC.Show.Show Effectful.DiscordChannel.Effect.AllowedMentionTypes
instance Data.Aeson.Types.ToJSON.ToJSON Effectful.DiscordChannel.Effect.AllowedMention
instance GHC.Generics.Generic Effectful.DiscordChannel.Effect.AllowedMention
instance GHC.Classes.Eq Effectful.DiscordChannel.Effect.AllowedMention
instance GHC.Show.Show Effectful.DiscordChannel.Effect.AllowedMention
instance GHC.Generics.Generic Effectful.DiscordChannel.Effect.SendMessageParams
instance GHC.Classes.Eq Effectful.DiscordChannel.Effect.SendMessageParams
instance GHC.Show.Show Effectful.DiscordChannel.Effect.SendMessageParams


-- | <a>Effect</a> を実行するインタプリタです。
--   
--   詳細: <a>https://discord.com/developers/docs/topics/gateway</a>
module Effectful.DiscordGateway.Effect
data DiscordGateway :: Effect
[ReceiveEvent] :: DiscordGateway m (Maybe Response)
[SendEvent] :: Request -> DiscordGateway m ()

-- | WebSocket経由でDiscordから送信されてきたイベントをハンドリングします
receiveEvent :: (HasCallStack, DiscordGateway :> es) => Eff es (Maybe Response)

-- | WebSocket経由でDiscordにイベントを送信します
sendEvent :: (HasCallStack, DiscordGateway :> es) => Request -> Eff es ()


-- | スラッシュコマンドに関するAPIを実行するためのEffectです。
--   
--   Discord本家のスラッシュコマンドの仕様はこちらです
--   <a>https://discord.com/developers/docs/interactions/application-commands#</a>
module Effectful.DiscordSlash.Effect
data SlashCommand :: Effect
[GlobalCommand] :: Name -> Description -> [CommandOption] -> SlashCommand m ()

-- | <a>SendMessageParams</a> のスマートコンストラクタ
makeGlobalSlashCommand :: Text -> Text -> [CommandOption] -> SlashCommand m ()


-- | Logを出力するためのEffectです。
module Effectful.DynamicLogger.Effect
data DynamicLogger :: Effect
[Info] :: Utf8Builder -> DynamicLogger m ()
[Attention] :: Utf8Builder -> DynamicLogger m ()

-- | ログを出力します
info :: (HasCallStack, DynamicLogger :> es) => Utf8Builder -> Eff es ()

-- | エラーログを出力します
attention :: (HasCallStack, DynamicLogger :> es) => Utf8Builder -> Eff es ()

module Effectful.DynamicLogger.Interpreter

-- | 本番の環境で実行するロガーです。RIO.Loggerに合わせて出力結果が選択されます
runDynamicLogger :: Log :> es => Eff (DynamicLogger : es) a -> Eff es a

-- | テスト環境で実行されるロガーです。何も表示しません
runSilentDynamicLogger :: Eff (DynamicLogger : es) a -> Eff es a

module Effectful.DynamicLogger

-- | 本番の環境で実行するロガーです。RIO.Loggerに合わせて出力結果が選択されます
runDynamicLogger :: Log :> es => Eff (DynamicLogger : es) a -> Eff es a

-- | テスト環境で実行されるロガーです。何も表示しません
runSilentDynamicLogger :: Eff (DynamicLogger : es) a -> Eff es a
data DynamicLogger :: Effect

-- | ログを出力します
info :: (HasCallStack, DynamicLogger :> es) => Utf8Builder -> Eff es ()

-- | エラーログを出力します
attention :: (HasCallStack, DynamicLogger :> es) => Utf8Builder -> Eff es ()


-- | <a>Effect</a> を実行するインタプリタです。
module Effectful.DiscordGateway.Interpreter
runClient :: MonadUnliftIO m => String -> PortNumber -> String -> ConnectionOptions -> Headers -> (Connection -> m a) -> m a
withPingThread :: MonadUnliftIO m => Connection -> Int -> IO () -> m a -> m a
handleEvent :: ByteString -> Either String Response

-- | DiscordGatewayAPIに接続します
withDiscordGatewayConnection :: MonadUnliftIO m => (Connection -> m a) -> m a

-- | DiscordGatewayのEffectを実行します。
runDiscordGateway :: (IOE :> es, Environment :> es, DynamicLogger :> es) => Connection -> Eff (DiscordGateway : es) a -> Eff es a

module Effectful.DiscordGateway
data DiscordGateway :: Effect

-- | WebSocket経由でDiscordから送信されてきたイベントをハンドリングします
receiveEvent :: (HasCallStack, DiscordGateway :> es) => Eff es (Maybe Response)

-- | WebSocket経由でDiscordにイベントを送信します
sendEvent :: (HasCallStack, DiscordGateway :> es) => Request -> Eff es ()

-- | DiscordGatewayAPIに接続します
withDiscordGatewayConnection :: MonadUnliftIO m => (Connection -> m a) -> m a
withPingThread :: MonadUnliftIO m => Connection -> Int -> IO () -> m a -> m a

-- | DiscordGatewayのEffectを実行します。
runDiscordGateway :: (IOE :> es, Environment :> es, DynamicLogger :> es) => Connection -> Eff (DiscordGateway : es) a -> Eff es a

module Effectful.Req
request :: (Request :> es, HttpMethod method, HttpBody body, HttpResponse response, HttpBodyAllowed (AllowsBody method) (ProvidesBody body)) => method -> Url scheme -> body -> Proxy response -> Option scheme -> Eff es response
data Request :: Effect
[Req] :: (HttpMethod method, HttpBody body, HttpResponse response, HttpBodyAllowed (AllowsBody method) (ProvidesBody body)) => method -> Url scheme -> body -> Proxy response -> Option scheme -> Request m response
runRequest :: Eff (Request : es) a -> Eff es a
getResponseBodyAsJsonResponse :: FromJSON a => JsonResponse a -> IO a


-- | <a>Effect</a> を実行するインタプリタです。
module Effectful.DiscordSlash.Interpreter

-- | スラッシュコマンド登録のAPIを呼び出します。
runRegisterSlash :: (DiscordApiTokenReader :> es, Request :> es, DiscordApplication :> es, DynamicLogger :> es) => Eff (SlashCommand : es) a -> Eff es a

module Effectful.DiscordSlash
data SlashCommand :: Effect

-- | スラッシュコマンド登録のAPIを呼び出します。
runRegisterSlash :: (DiscordApiTokenReader :> es, Request :> es, DiscordApplication :> es, DynamicLogger :> es) => Eff (SlashCommand : es) a -> Eff es a


-- | <a>Effect</a> を実行するインタプリタです。
module Effectful.DiscordChannel.Interpreter

-- | DiscordAPIのホスト部分を返す
host :: Text

-- | DiscordAPIのversionを返す
version :: Text

-- | DiscordChannelAPIを実行します
runDiscordChannel :: (DiscordApiTokenReader :> es, Request :> es) => Eff (DiscordChannel : es) a -> Eff es a

module Effectful.DiscordChannel

-- | <a>SendMessageParams</a> のスマートコンストラクタ
makeSendMessageParams :: ChannelId -> Content -> Maybe Text -> Bool -> Maybe AllowedMention -> Maybe MessageReferencesObject -> Maybe Text -> SendMessageParams

-- | <a>CreateChannelParams</a> を生成するためのスマートコンストラクタ
makeCreateChannelParams :: ChannelName -> CreateChannelParams

-- | <a>makeSendMessageParams</a> のラッパー
makeMessage :: ChannelId -> Content -> SendMessageParams

-- | 新たにDiscordChannelを作成します
createChannel :: (HasCallStack, DiscordChannel :> es) => GuildId -> CreateChannelParams -> Eff es ()

-- | DiscordChannelにBotでテキストメッセージを送信します
sendMessage :: (HasCallStack, DiscordChannel :> es) => SendMessageParams -> Eff es ()

-- | DiscordChannelAPIを実行します
runDiscordChannel :: (DiscordApiTokenReader :> es, Request :> es) => Eff (DiscordChannel : es) a -> Eff es a
channelId :: Lens' SendMessageParams ChannelId
content :: Lens' SendMessageParams Content
nonce :: Lens' SendMessageParams (Maybe Text)
tts :: Lens' SendMessageParams Bool
allowedMentions :: Lens' SendMessageParams (Maybe AllowedMention)
messageReference :: Lens' SendMessageParams (Maybe MessageReferencesObject)
stickerIds :: Lens' SendMessageParams (Maybe Text)
data DiscordChannel :: Effect

-- | チャンネルの情報を更新します
modifyChannel :: (HasCallStack, DiscordChannel :> es) => Channel -> Eff es ()


-- | 宇治共和国では TIMES(A-M) TIMES(A-N)
--   といったグループチャンネルが存在し、各timesの頭文字にを該当するグループチャンネルに紐付けて管理しています。
--   このモジュールはそれらの紐付けと並び換えを自動化するための定義です |
module Data.Uzi.OrganizeTimes

-- | <a>organizeTimes</a> を実行した時に発生しうるエラーをまとめたデータ構造です。
--   発生しうるエラーとシチュエーションは次の通りです
--   
--   <a>FindTimesError</a>: TIMES(A-M) TIMES(N-Z)
--   という名前のグループチャンネルがGuildIdが指すサーバーにどちらか片方でも存在しない場合に発生します
--   'Data.Uzi.OrganizeTimes.FindChannelError:
--   ソートしたあとに実際にDiscordに変更を反映する過程でTimesChannelに記載されているChannelIdが存在しない場合に発生します
data OrganizeTimesError
FindTimesError :: FindTimesChannelGroupsError -> OrganizeTimesError
FindChannelError :: ChannelId -> OrganizeTimesError

-- | 実際にTimesChannelを整理する関数です。
--   
--   整理とは次の行為を指します
--   
--   <ul>
--   <li>サーバーに存在する全てのTimesChannelを、引数に渡されたグループチャンネルに適切にグルーピングする行為。詳細は
--   <a>groupByFirstLetter</a> を参照してください</li>
--   <li>グループ内のtimesの頭文字をアルファベットで昇順ソートする行為</li>
--   </ul>
organizeTimes :: (DiscordChannel :> es, Error OrganizeTimesError :> es, DynamicLogger :> es) => GuildId -> Eff es ()
instance GHC.Classes.Eq Data.Uzi.OrganizeTimes.OrganizeTimesError
instance GHC.Show.Show Data.Uzi.OrganizeTimes.OrganizeTimesError


module Data.Uzi
timesId :: Functor f => (ChannelId -> f ChannelId) -> TimesChannel -> f TimesChannel
timesName :: Functor f => (TimesName -> f TimesName) -> TimesChannel -> f TimesChannel

-- | Timesチャンネルを表すデータ構造です。
data TimesChannel

-- | Timesチャンネルに使われている名前のデータ構造です。
--   
--   基本的な形は #times-{name} のnameの部分を表わしています。
--   
--   だがもし、君が例外だというのなら… ならば生き延びるがいい、君にはその権利と義務がある
--   
--   詳細は <a>makeTimesChannel</a> を参照してください。
data TimesName

-- | 実際にTimesChannelを整理する関数です。
--   
--   整理とは次の行為を指します
--   
--   <ul>
--   <li>サーバーに存在する全てのTimesChannelを、引数に渡されたグループチャンネルに適切にグルーピングする行為。詳細は
--   <a>groupByFirstLetter</a> を参照してください</li>
--   <li>グループ内のtimesの頭文字をアルファベットで昇順ソートする行為</li>
--   </ul>
organizeTimes :: (DiscordChannel :> es, Error OrganizeTimesError :> es, DynamicLogger :> es) => GuildId -> Eff es ()

-- | <a>organizeTimes</a> を実行した時に発生しうるエラーをまとめたデータ構造です。
--   発生しうるエラーとシチュエーションは次の通りです
--   
--   <a>FindTimesError</a>: TIMES(A-M) TIMES(N-Z)
--   という名前のグループチャンネルがGuildIdが指すサーバーにどちらか片方でも存在しない場合に発生します
--   'Data.Uzi.OrganizeTimes.FindChannelError:
--   ソートしたあとに実際にDiscordに変更を反映する過程でTimesChannelに記載されているChannelIdが存在しない場合に発生します
data OrganizeTimesError
FindTimesError :: FindTimesChannelGroupsError -> OrganizeTimesError
FindChannelError :: ChannelId -> OrganizeTimesError


-- | UziBot自身のApplication Idを取得するEffectのインタプリタです
module Effectful.DiscordApplication.Interpreter
applicationId :: Application -> ApplicationId

-- | <a>DiscordApplication</a> Effectを実行します
--   
--   このインタプリタではAPIにアクセスして、自身のApplication Idを取得します
runDiscordApplication :: (DiscordApiTokenReader :> es, Request :> es) => Eff (DiscordApplication : es) a -> Eff es a
instance GHC.Show.Show Effectful.DiscordApplication.Interpreter.FromEnvironmentError
instance GHC.Classes.Eq Effectful.DiscordApplication.Interpreter.Application
instance GHC.Show.Show Effectful.DiscordApplication.Interpreter.Application
instance Data.Aeson.Types.FromJSON.FromJSON Effectful.DiscordApplication.Interpreter.Application
instance GHC.Exception.Type.Exception Effectful.DiscordApplication.Interpreter.FromEnvironmentError

module Effectful.DiscordApplication

-- | UziBotのApplicationを取得します。
getApplication :: DiscordApplication :> es => Eff es ApplicationId

-- | <a>DiscordApplication</a> Effectを実行します
--   
--   このインタプリタではAPIにアクセスして、自身のApplication Idを取得します
runDiscordApplication :: (DiscordApiTokenReader :> es, Request :> es) => Eff (DiscordApplication : es) a -> Eff es a

-- | UziBotのApplication Idを読み出すためのEffectの定義
data DiscordApplication :: Effect
[GetApplication] :: DiscordApplication m ApplicationId


-- | Discordが送信してくるHELLOイベントのイベントハンドラです。
--   
--   詳細:
--   <a>https://discord.com/developers/docs/topics/gateway-events#hello</a>
module EventHandler.HelloEventHandler
helloEventHandler :: (DiscordGateway :> es, DynamicLogger :> es, NonDet :> es, DiscordApiTokenReader :> es, State (Maybe HeartbeatInterval) :> es) => Response -> Eff es ()


-- | このモジュールには、Discordチャンネルの'message
--   create'イベントに対応し、特定のコマンド('create-times')が 送信された際に新しいtimes
--   channelを作成する処理が含まれています。さらに、作成後にそのチャンネルを整理する機能も提供します。
module EventHandler.MessageCreateEventHandler.CreateChannel

-- | <a>MessageCreate</a>イベントに反応し、特定のメッセージ('create-times')を受け取った際に新しいtimes
--   channelの作成を行います。
--   作成後、そのチャンネルを整理する処理も実施します。処理が成功すると、成功のメッセージを、失敗するとエラーメッセージを送信します。
--   
--   
--   この関数は<a>MessageCreate</a>イベントを処理し、受け取ったメッセージが'create-times'コマンドであるかどうかを解析します。
--   条件を満たす場合、新しいtimes channelを作成し、成功または失敗のログを記録し、対応するメッセージをチャンネルに送信します。
--   その後、チャンネルを整理する処理が行われ、その結果に基づいて追加のメッセージが送信されます。
createChannelEventHandler :: (DiscordChannel :> es, NonDet :> es, DynamicLogger :> es) => Response -> Eff es ()


-- | このモジュールには、Discordチャンネルで<tt>help</tt>メッセージコマンドに応答するイベントハンドラーが含まれています。
--   ヘルプドキュメントへのリンクを提供します。
module EventHandler.MessageCreateEventHandler.Help

-- | <a>MessageCreate</a>イベントを処理し、メッセージ内容が<tt>help</tt>かどうかを確認します。
--   そうであれば、ヘルプドキュメントへのリンクを含むメッセージを送信します。
--   
--   この関数は、さまざまなタイプのイベントを処理するためにケース式を使用しており、
--   特に<a>MessageCreate</a>に焦点を当てています。メッセージ本体が<tt>help</tt>を含んでいるかどうかを確認します。
--   成功した場合、ディスパッチをログに記録し、ヘルプURLを含むメッセージを構築し、送信します。
--   URLをコンテンツオブジェクトに変換できない場合は何もしません。
helpEventHandler :: (DiscordChannel :> es, NonDet :> es, DynamicLogger :> es) => Response -> Eff es ()


-- | このモジュールには、Discordチャンネルの'message
--   create'イベントに対応し、特定のコマンド('organize-times')が 送信された際にtimes
--   channelを整理する処理が含まれています。
module EventHandler.MessageCreateEventHandler.OrganizeTimes

-- | <a>MessageCreate</a>イベントに反応し、特定のメッセージ('organize-times')を受け取った際にtimes
--   channelの整理を行います。 成功すると成功のメッセージを、失敗するとエラーメッセージを送信します。
--   
--   
--   この関数は<a>MessageCreate</a>イベントを処理し、受け取ったメッセージが'organize-times'かどうかを確認します。
--   条件を満たす場合、整理プロセスを開始し、成功または失敗のログを記録し、対応するメッセージをチャンネルに送信します。
--   整理プロセス中に発生したエラーは適切にハンドリングされ、エラーメッセージが送信されます。
organizeTimesHandler :: (DiscordChannel :> es, NonDet :> es, DynamicLogger :> es) => Response -> Eff es ()


module EventHandler.MessageCreateEventHandler.Ping

-- | "ping"メッセージに応答して"pong"を返します。
pingEventHandler :: (DiscordChannel :> es, NonDet :> es, DynamicLogger :> es) => Response -> Eff es ()


-- | Discordが送信してくるMessageCreateイベントのイベントハンドラです。
--   
--   主にサーバー上でメッセージが投稿された時に実行されます
module EventHandler.MessageCreateEventHandler

-- | メッセージが投稿された時に実行されるイベントハンドラです
--   
--   内部で実行したいコマンドごとにハンドラを分けるためにNonDet Effectに依存しています
dispatchMessageEventHandlers :: (DiscordChannel :> es, NonDet :> es, DynamicLogger :> es) => Response -> Eff es ()


-- | Discordが送信してくるReadyイベントのイベントハンドラです。
--   
--   詳細:
--   <a>https://discord.com/developers/docs/topics/gateway-events#ready</a>
module EventHandler.ReadyEventHandler
readyEventHandler :: (DynamicLogger :> es, NonDet :> es, BotUser :> es) => Response -> Eff es ()

module EventHandler
dispatchEventHandlers :: (DiscordGateway :> es, DynamicLogger :> es, DiscordApiTokenReader :> es, DiscordChannel :> es, BotUser :> es, State (Maybe HeartbeatInterval) :> es) => Response -> Eff es ()

module Lib
runUzi :: IO ()
data UziError
CrashError :: UziError
instance GHC.Show.Show Lib.FromEnvironmentError
instance GHC.Show.Show Lib.UziError
instance GHC.Exception.Type.Exception Lib.ReceiverError
instance GHC.Classes.Eq Lib.ReceiverError
instance GHC.Show.Show Lib.ReceiverError
instance GHC.Show.Show Lib.SenderError
instance GHC.Exception.Type.Exception Lib.SendHeartbeatError
instance GHC.Classes.Eq Lib.SendHeartbeatError
instance GHC.Show.Show Lib.SendHeartbeatError
instance GHC.Exception.Type.Exception Lib.UziError
instance GHC.Exception.Type.Exception Lib.FromEnvironmentError
